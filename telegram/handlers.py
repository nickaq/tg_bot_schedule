import re
import logging
import os.path
from aiogram import Bot, Dispatcher, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.markdown import hbold, hitalic
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from db.models import get_db_session
from db.database import DatabaseManager
from config import MOODLE_BASE_URL
from simple_schedule_parser import SimpleScheduleParser

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


# Define states for conversation handlers
class CredentialsForm(StatesGroup):
    """States for credentials form"""
    username = State()
    password = State()


class LessonForm(StatesGroup):
    """States for adding a lesson"""
    url = State()
    name = State()


# Create bot and dispatcher
storage = MemoryStorage()


async def start_command(message: Message):
    """Handler for /start command"""
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    
    session = get_db_session()
    try:
        # Check if user exists, create if not
        user = DatabaseManager.get_user_by_telegram_id(session, user_id)
        if not user:
            DatabaseManager.create_user(session, user_id)
            logger.info(f"Created new user: {user_id}")
        
        # Create keyboard with main commands
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üîë –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ"), KeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è")],
                [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç—å"), KeyboardButton(text="‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è")],
                [KeyboardButton(text="‚öôÔ∏è –£–≤—ñ–º–∫–Ω—É—Ç–∏/–≤–∏–º–∫–Ω—É—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è"), KeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å")],
            ],
            resize_keyboard=True,
            is_persistent=True
        )
        
        # Welcome message in Ukrainian
        await message.answer(
            f"üëã –í—ñ—Ç–∞—é, {username}!\n\n"
            f"–Ø –±–æ—Ç, —è–∫–∏–π –º–æ–∂–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—ñ–¥–º—ñ—á–∞—Ç–∏ –≤–∞—à—É –ø—Ä–∏—Å—É—Ç–Ω—ñ—Å—Ç—å –Ω–∞ –∑–∞–Ω—è—Ç—Ç—è—Ö —É —Å–∏—Å—Ç–µ–º—ñ dl.nure.ua.\n\n"
            f"–©–æ–± –ø–æ—á–∞—Ç–∏, –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ —Å–≤–æ—ó –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ Moodle, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ 'üîë –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ'.\n"
            f"–ü–æ—Ç—ñ–º –¥–æ–¥–∞–π—Ç–µ —Å–≤–æ—ó –∑–∞–Ω—è—Ç—Ç—è —á–µ—Ä–µ–∑ '‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è'.\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
            f"üîë –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ - –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –ª–æ–≥—ñ–Ω —Ç–∞ –ø–∞—Ä–æ–ª—å –¥–ª—è Moodle\n"
            f"‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è - –î–æ–¥–∞—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–æ—Å—Ç—ñ\n"
            f"üìã –°–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç—å - –ü–æ–∫–∞–∑–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∑–∞–Ω—è—Ç—Ç—è\n"
            f"‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è - –í–∏–¥–∞–ª–∏—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–µ –∑–∞–Ω—è—Ç—Ç—è\n"
            f"‚öôÔ∏è –£–≤—ñ–º–∫–Ω—É—Ç–∏/–≤–∏–º–∫–Ω—É—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è - –£–≤—ñ–º–∫–Ω—É—Ç–∏/–≤–∏–º–∫–Ω—É—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É –≤—ñ–¥–º—ñ—Ç–∫—É –¥–ª—è –∑–∞–Ω—è—Ç—å\n"
            f"üìä –°—Ç–∞—Ç—É—Å - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó —Ç–∞ –∞–∫—Ç–∏–≤–Ω—ñ –ø—Ä–µ–¥–º–µ—Ç–∏\n\n"
            f"–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏–º—É –≤–∞—à—ñ –∑–∞–Ω—è—Ç—Ç—è –∫–æ–∂–Ω—ñ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω —ñ –≤—ñ–¥–º—ñ—á–∞—Ç–∏–º—É –ø—Ä–∏—Å—É—Ç–Ω—ñ—Å—Ç—å, –∫–æ–ª–∏ —Ü–µ –º–æ–∂–ª–∏–≤–æ.",
            reply_markup=keyboard
        )
    finally:
        session.close()


async def set_credentials_command(message: Message, state: FSMContext):
    """Handler for /set_credentials command"""
    await message.answer(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –∞–¥—Ä–µ—Å—É Moodle (–ª–æ–≥—ñ–Ω):\n\n"
        "–¶–µ –º–∞—î –±—É—Ç–∏ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –∞–¥—Ä–µ—Å–∞, —è–∫—É –≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ –¥–ª—è –≤—Ö–æ–¥—É –≤ dl.nure.ua"
    )
    await state.set_state(CredentialsForm.username)


async def process_username(message: Message, state: FSMContext):
    """Process username and ask for password"""
    email = message.text.strip()
    
    # Basic email validation
    if '@' not in email or '.' not in email:
        await message.answer(
            "‚ùå –¶–µ –Ω–µ —Å—Ö–æ–∂–µ –Ω–∞ –¥—ñ–π—Å–Ω—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –∞–¥—Ä–µ—Å—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –∞–¥—Ä–µ—Å—É, —è–∫—É –≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ –¥–ª—è –≤—Ö–æ–¥—É –≤ dl.nure.ua."
        )
        return
    
    # Save email as username
    await state.update_data(username=email)
    
    # Ask for password
    await message.answer(
        "–¢–µ–ø–µ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à –ø–∞—Ä–æ–ª—å –¥–ª—è Moodle:\n\n"
        "‚ö†Ô∏è –ü—Ä–∏–º—ñ—Ç–∫–∞: –í–∞—à –ø–∞—Ä–æ–ª—å –±—É–¥–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ –¥–ª—è –±–µ–∑–ø–µ–∫–∏, –∞–ª–µ –º–∞–π—Ç–µ –Ω–∞ —É–≤–∞–∑—ñ, —â–æ –≤–∏ –ø–µ—Ä–µ–¥–∞—î—Ç–µ –π–æ–≥–æ —Ü—å–æ–º—É –±–æ—Ç—É. –í—ñ–Ω –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏–π —Ç—ñ–ª—å–∫–∏ –¥–ª—è –≤—Ö–æ–¥—É –≤ Moodle."
    )
    await state.set_state(CredentialsForm.password)


async def process_password(message: Message, state: FSMContext):
    """Process password and save credentials"""
    user_data = await state.get_data()
    username = user_data.get('username')
    password = message.text
    user_id = message.from_user.id
    
    # Delete the message with password for security
    await message.delete()
    
    session = get_db_session()
    try:
        # Save credentials
        user = DatabaseManager.set_user_credentials(session, user_id, username, password)
        
        if user:
            await message.answer(
                "‚úÖ –í–∞—à—ñ –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ Moodle —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!\n\n"
                "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ '‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è'"
            )
        else:
            await message.answer(
                "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –≤–∞—à—ñ –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
            )
    finally:
        session.close()
    
    # Finish the state
    await state.clear()


async def add_lesson_command(message: Message, state: FSMContext):
    """Handler for /add_lesson command"""
    user_id = message.from_user.id
    
    session = get_db_session()
    try:
        user = DatabaseManager.get_user_by_telegram_id(session, user_id)
        if not user or not user.moodle_username or not user.encrypted_password:
            await message.answer(
                "‚ùå –í–∏ —â–µ –Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–ª–∏ —Å–≤–æ—ó –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ Moodle.\n"
                "–°–ø–æ—á–∞—Ç–∫—É —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ—é 'üîë –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ'."
            )
            return
        
        await message.answer(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å URL-–∞–¥—Ä–µ—Å—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑–∞–Ω—è—Ç—Ç—è –∑ dl.nure.ua. "
            "–í–æ–Ω–∞ –º–∞—î –≤–∏–≥–ª—è–¥–∞—Ç–∏ –ø—Ä–∏–±–ª–∏–∑–Ω–æ —Ç–∞–∫: https://dl.nure.ua/mod/attendance/view.php?id=123456"
        )
        await state.set_state(LessonForm.url)
    finally:
        session.close()


async def process_lesson_url(message: Message, state: FSMContext):
    """Process lesson URL and ask for name"""
    url = message.text.strip()
    
    # Validate URL
    if not url.startswith("https://dl.nure.ua/") and not url.startswith("http://dl.nure.ua/"):
        await message.answer(
            "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π URL. –í—ñ–Ω –º–∞—î –±—É—Ç–∏ –∑ –¥–æ–º–µ–Ω—É dl.nure.ua.\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å '–°–∫–∞—Å—É–≤–∞—Ç–∏' –¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏"
        )
        return
    
    # Check for view.php
    if "view.php" not in url:
        await message.answer(
            "‚ö†Ô∏è URL –Ω–µ —Å—Ö–æ–∂–∏–π –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –∑–∞–Ω—è—Ç—Ç—è.\n"
            "–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤—ñ–Ω –º—ñ—Å—Ç–∏—Ç—å 'view.php?id=...' –∞–±–æ –ø–æ–¥—ñ–±–Ω–µ.\n"
            "–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –≤—Å–µ –æ–¥–Ω–æ? –ù–∞–ø–∏—à—ñ—Ç—å '–°–∫–∞—Å—É–≤–∞—Ç–∏' —è–∫—â–æ –Ω—ñ."
        )
    
    # Save URL
    await state.update_data(url=url)
    
    # Ask for lesson name
    await message.answer(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –¥–ª—è —Ü—å–æ–≥–æ –∑–∞–Ω—è—Ç—Ç—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ 101' –∞–±–æ '–õ–∞–±. –∑ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è'):\n"
        "–¶—è –Ω–∞–∑–≤–∞ –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∞ –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö."
    )
    await state.set_state(LessonForm.name)


async def process_lesson_name(message: Message, state: FSMContext):
    """Process lesson name and save lesson"""
    user_data = await state.get_data()
    url = user_data.get('url')
    name = message.text.strip()
    user_id = message.from_user.id
    
    session = get_db_session()
    try:
        # Save lesson
        lesson = DatabaseManager.add_lesson(session, user_id, url, name)
        
        if lesson:
            await message.answer(
                f"‚úÖ –ó–∞–Ω—è—Ç—Ç—è '{name}' —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!\n\n"
                f"–Ø —Ç–µ–ø–µ—Ä –±—É–¥—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤—ñ–¥–º—ñ—Ç–∏—Ç–∏—Å—å –Ω–∞ —Ü—å–æ–º—É –∑–∞–Ω—è—Ç—Ç—ñ.\n"
                f"–í–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤–æ—ó –∑–∞–Ω—è—Ç—Ç—è, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ 'üìã –°–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç—å'"
            )
        else:
            await message.answer(
                "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—å –¥–æ–¥–∞—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
            )
    finally:
        session.close()
    
    # Finish the state
    await state.clear()


async def list_lessons_command(message: Message):
    """Handler for /list_lessons command"""
    user_id = message.from_user.id
    
    session = get_db_session()
    try:
        lessons = DatabaseManager.get_user_lessons(session, user_id)
        
        if not lessons:
            await message.answer(
                "–í–∏ —â–µ –Ω–µ –¥–æ–¥–∞–ª–∏ –∂–æ–¥–Ω–æ–≥–æ –∑–∞–Ω—è—Ç—Ç—è.\n"
                "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ '‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è' —â–æ–± –¥–æ–¥–∞—Ç–∏ –≤–∞—à–µ –ø–µ—Ä—à–µ –∑–∞–Ω—è—Ç—Ç—è."
            )
            return
        
        # Prepare response message
        response = "–í–∞—à—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∑–∞–Ω—è—Ç—Ç—è:\n\n"
        
        for lesson in lessons:
            # Status indicator
            status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–µ" if lesson.active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–µ"
            
            # Last check and mark info
            last_check = "–ù—ñ–∫–æ–ª–∏" if not lesson.last_checked else lesson.last_checked.strftime("%d.%m.%Y %H:%M")
            last_mark = "–ù—ñ–∫–æ–ª–∏" if not lesson.last_marked else lesson.last_marked.strftime("%d.%m.%Y %H:%M")
            
            response += (
                f"ID: {lesson.id} - {lesson.name}\n"
                f"–°—Ç–∞—Ç—É—Å: {status}\n"
                f"–û—Å—Ç–∞–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞: {last_check}\n"
                f"–û—Å—Ç–∞–Ω–Ω—è –≤—ñ–¥–º—ñ—Ç–∫–∞: {last_mark}\n"
                f"URL: {lesson.url}\n\n"
            )
        
        response += (
            "–©–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è'\n"
            "–©–æ–± —É–≤—ñ–º–∫–Ω—É—Ç–∏/–≤–∏–º–∫–Ω—É—Ç–∏ —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '‚öôÔ∏è –£–≤—ñ–º–∫–Ω—É—Ç–∏/–≤–∏–º–∫–Ω—É—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è'"
        )
        
        await message.answer(response)
    finally:
        session.close()


async def remove_lesson_command(message: Message):
    """Handler for /remove_lesson command"""
    user_id = message.from_user.id
    
    session = get_db_session()
    try:
        lessons = DatabaseManager.get_user_lessons(session, user_id)
        
        if not lessons:
            await message.answer(
                "–í–∏ —â–µ –Ω–µ –¥–æ–¥–∞–ª–∏ –∂–æ–¥–Ω–æ–≥–æ –∑–∞–Ω—è—Ç—Ç—è.\n"
                "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ '‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è' —â–æ–± –¥–æ–¥–∞—Ç–∏ –≤–∞—à–µ –ø–µ—Ä—à–µ –∑–∞–Ω—è—Ç—Ç—è."
            )
            return
        
        # Create inline keyboard with lessons
        builder = InlineKeyboardMarkup(inline_keyboard=[])
        buttons = []
        for lesson in lessons:
            button_text = f"{lesson.name} (ID: {lesson.id})"
            callback_data = f"remove_{lesson.id}"
            buttons.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])
        
        builder = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await message.answer(
            "–í–∏–±–µ—Ä—ñ—Ç—å –∑–∞–Ω—è—Ç—Ç—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:",
            reply_markup=builder
        )
    finally:
        session.close()


async def toggle_lesson_command(message: Message):
    """Handler for /toggle_lesson command"""
    user_id = message.from_user.id
    
    session = get_db_session()
    try:
        lessons = DatabaseManager.get_user_lessons(session, user_id)
        
        if not lessons:
            await message.answer(
                "–í–∏ —â–µ –Ω–µ –¥–æ–¥–∞–ª–∏ –∂–æ–¥–Ω–æ–≥–æ –∑–∞–Ω—è—Ç—Ç—è.\n"
                "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ '‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è' —â–æ–± –¥–æ–¥–∞—Ç–∏ –≤–∞—à–µ –ø–µ—Ä—à–µ –∑–∞–Ω—è—Ç—Ç—è."
            )
            return
        
        # Create inline keyboard with lessons
        buttons = []
        for lesson in lessons:
            status = "‚úÖ" if lesson.active else "‚ùå"
            button_text = f"{status} {lesson.name} (ID: {lesson.id})"
            callback_data = f"toggle_{lesson.id}"
            buttons.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])
        
        builder = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await message.answer(
            "–í–∏–±–µ—Ä—ñ—Ç—å –∑–∞–Ω—è—Ç—Ç—è –¥–ª—è —É–≤—ñ–º–∫–Ω–µ–Ω–Ω—è/–≤–∏–º–∫–Ω–µ–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –≤—ñ–¥–º—ñ—Ç–∫–∏:",
            reply_markup=builder
        )
    finally:
        session.close()


async def remove_lesson_callback(callback_query: CallbackQuery):
    """Handle remove lesson callback"""
    await callback_query.answer()
    
    # Extract lesson ID from callback data
    match = re.search(r'remove_(\d+)', callback_query.data)
    if not match:
        await callback_query.message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä.")
        return
    
    lesson_id = int(match.group(1))
    user_id = callback_query.from_user.id
    
    session = get_db_session()
    try:
        # Remove lesson
        success = DatabaseManager.remove_lesson(session, user_id, lesson_id)
        
        if success:
            await callback_query.message.edit_text(
                f"‚úÖ –ó–∞–Ω—è—Ç—Ç—è (ID: {lesson_id}) –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ."
            )
        else:
            await callback_query.message.answer(
                "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
            )
    finally:
        session.close()


async def toggle_lesson_callback(callback_query: CallbackQuery):
    """Handle toggle lesson callback"""
    await callback_query.answer()
    
    # Extract lesson ID from callback data
    match = re.search(r'toggle_(\d+)', callback_query.data)
    if not match:
        await callback_query.message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä.")
        return
    
    lesson_id = int(match.group(1))
    user_id = callback_query.from_user.id
    
    session = get_db_session()
    try:
        # Toggle lesson status
        lesson = DatabaseManager.toggle_lesson_status(session, user_id, lesson_id)
        
        if lesson:
            status = "—É–≤—ñ–º–∫–Ω–µ–Ω–æ" if lesson.active else "–≤–∏–º–∫–Ω–µ–Ω–æ"
            await callback_query.message.edit_text(
                f"‚úÖ –ó–∞–Ω—è—Ç—Ç—è '{lesson.name}' (ID: {lesson_id}) –±—É–ª–æ {status}."
            )
        else:
            await callback_query.message.answer(
                "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–Ω—è—Ç—Ç—è. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
            )
    finally:
        session.close()


async def cancel_command(message: Message, state: FSMContext):
    """Handler for /cancel command or '–°–∫–∞—Å—É–≤–∞—Ç–∏' text - cancels any ongoing form"""
    # Check if the message is '–°–∫–∞—Å—É–≤–∞—Ç–∏'
    if message.text.strip() == '–°–∫–∞—Å—É–≤–∞—Ç–∏':
        await message.answer("–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π –ø—É–Ω–∫—Ç –º–µ–Ω—é.")
    else:
        await message.answer("–ü–æ—Ç–æ—á–Ω—É –¥—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    
    # Reset state
    await state.clear()


async def schedule_command(message: Message):
    """Handler for /schedule command - shows today's and weekly class schedule from CSV file"""
    try:
        # Initialize schedule parser
        schedule_path = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 
                                    'TimeTable.csv')
        parser = SimpleScheduleParser(schedule_path)
        
        if not parser.load_schedule():
            await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –∑–∞–Ω—è—Ç—å. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
            return
            
        # Check if there's a class in session now
        is_class_time, current_class = parser.is_class_time()
        
        # Build the response message
        response_parts = []
        
        # 1. Current class status
        if is_class_time and current_class:
            subject = current_class.get('subject', '–ó–∞–Ω—è—Ç—Ç—è')
            start_time = current_class['start_time'].strftime("%H:%M")
            end_time = current_class['end_time'].strftime("%H:%M")
            response_parts.append(f"‚ú® <b>–ü–æ—Ç–æ—á–Ω–µ –∑–∞–Ω—è—Ç—Ç—è:</b> {subject} ({start_time} - {end_time})\n")
        else:
            response_parts.append("‚ú® <b>–ó–∞—Ä–∞–∑ –Ω–µ–º–∞—î –∑–∞–Ω—è—Ç—å</b>\n")
        
        # Get weekly schedule in a compact format organized by weekday
        weekly_schedule = parser.get_weekly_schedule()
        response_parts.append(weekly_schedule)
        
        # Send the complete message
        await message.answer("\n".join(response_parts), parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"Error in schedule command: {e}", exc_info=True)
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ä–æ–∑–∫–ª–∞–¥—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

async def status_command(message: Message):
    """Handler for /status command - shows login status and active lessons"""
    user_id = message.from_user.id
    
    session = get_db_session()
    try:
        # Check if user exists and has credentials
        user = DatabaseManager.get_user_by_telegram_id(session, user_id)
        
        if not user:
            await message.answer("‚ùå –í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏.")
            return
        
        # Check if user has Moodle credentials
        is_logged_in = bool(user.moodle_username and user.encrypted_password)
        
        # Get active lessons
        lessons = DatabaseManager.get_user_lessons(session, user_id, active_only=True)
        
        # Format status message
        status_text = "üìä –í–∞—à –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å:\n\n"
        
        # Login status
        if is_logged_in:
            status_text += f"‚úÖ {hbold('–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:')} –í–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ dl.nure.ua —è–∫ {hitalic(user.moodle_username)}\n\n"
        else:
            status_text += f"‚ùå {hbold('–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:')} –í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ dl.nure.ua\n"
            status_text += "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ 'üîë –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ' –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è\n\n"
        
        # Lessons
        status_text += f"{hbold('–ü—Ä–µ–¥–º–µ—Ç–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –≤—ñ–¥–º—ñ—Ç–∫–∏:')}\n"
        
        if lessons:
            for i, lesson in enumerate(lessons, 1):
                lesson_name = lesson.name or "–ë–µ–∑ –Ω–∞–∑–≤–∏"
                status_text += f"{i}. {hbold(lesson_name)}\n"
                # Add last checked and marked info if available
                if lesson.last_checked:
                    last_checked = lesson.last_checked.strftime("%d.%m.%Y %H:%M")
                    status_text += f"   –û—Å—Ç–∞–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞: {last_checked}\n"
                if lesson.last_marked:
                    last_marked = lesson.last_marked.strftime("%d.%m.%Y %H:%M")
                    status_text += f"   –û—Å—Ç–∞–Ω–Ω—è –≤—ñ–¥–º—ñ—Ç–∫–∞: {last_marked}\n"
        else:
            status_text += "–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –¥–ª—è –≤—ñ–¥–º—ñ—Ç–∫–∏.\n"
            status_text += "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ '‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è' –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–µ–¥–º–µ—Ç—ñ–≤.\n"
        
        await message.answer(status_text, parse_mode="HTML")
    finally:
        session.close()


def register_handlers(dp: Dispatcher):
    """Register all handlers with the dispatcher"""
    # Command handlers
    dp.message.register(start_command, Command(commands=["start"]))
    dp.message.register(set_credentials_command, Command(commands=["set_credentials"]))
    dp.message.register(set_credentials_command, F.text == "üîë –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ")
    dp.message.register(add_lesson_command, Command(commands=["add_lesson"]))
    dp.message.register(add_lesson_command, F.text == "‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è")
    dp.message.register(list_lessons_command, Command(commands=["list_lessons"]))
    dp.message.register(list_lessons_command, F.text == "üìã –°–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç—å")
    dp.message.register(remove_lesson_command, Command(commands=["remove_lesson"]))
    dp.message.register(remove_lesson_command, F.text == "‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è")
    dp.message.register(toggle_lesson_command, Command(commands=["toggle_lesson"]))
    dp.message.register(toggle_lesson_command, F.text == "‚öôÔ∏è –£–≤—ñ–º–∫–Ω—É—Ç–∏/–≤–∏–º–∫–Ω—É—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è")
    dp.message.register(status_command, Command(commands=["status"]))
    dp.message.register(status_command, F.text == "üìä –°—Ç–∞—Ç—É—Å")
    dp.message.register(schedule_command, Command(commands=["schedule"]))
    dp.message.register(schedule_command, F.text == "üìÖ –†–æ–∑–∫–ª–∞–¥ –∑–∞–Ω—è—Ç—å")
    dp.message.register(cancel_command, Command(commands=["cancel"]))
    dp.message.register(cancel_command, F.text == "–°–∫–∞—Å—É–≤–∞—Ç–∏")
    
    # Form state handlers
    dp.message.register(process_username, CredentialsForm.username)
    dp.message.register(process_password, CredentialsForm.password)
    dp.message.register(process_lesson_url, LessonForm.url)
    dp.message.register(process_lesson_name, LessonForm.name)
    
    # Callback query handlers
    dp.callback_query.register(remove_lesson_callback, F.data.startswith("remove_"))
    dp.callback_query.register(toggle_lesson_callback, F.data.startswith("toggle_"))
    
    return dp
